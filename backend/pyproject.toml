[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dto-api"
version = "0.1.0"
description = "Data Testing Orchestrator - Zero-SQL AI-assisted data testing framework"
authors = [
    {name = "DataFlowGuard Team", email = "team@dataflowguard.com"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    
    # CLI
    "typer>=0.9.0",
    "rich>=13.7.0",
    
    # Database & ORM
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg[binary]>=3.1.0",
    "asyncpg>=0.29.0",
    
    # Data & Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "orjson>=3.9.0",
    "jsonschema>=4.20.0",
    
    # File Processing
    "pyarrow>=14.0.0",
    "duckdb>=0.9.0",
    
    # Auth & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Observability
    "prometheus-fastapi-instrumentator>=6.1.0",
    "structlog>=23.2.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    
    # AI Integration
    "openai>=1.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.5.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "black>=23.11.0",
    "pre-commit>=3.6.0",
    "httpx>=0.25.0",
]

connectors = [
    "snowflake-connector-python>=3.6.0",
    "pyodbc>=5.0.0",
    "cryptography>=41.0.0",
]

[project.scripts]
dto = "dto_cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["dto_api", "dto_cli"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "snowflake.*",
    "pyodbc.*",
    "duckdb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
