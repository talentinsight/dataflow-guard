name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python (for backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Set up Node.js (for frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies (backend)
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip install -e ".[dev]"
    
    - name: Install dependencies (frontend)
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm ci
    
    - name: Run pip-audit (backend)
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip-audit --format=json --output=pip-audit-results.json
      continue-on-error: true
    
    - name: Run npm audit (frontend)
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-results.json
      continue-on-error: true
    
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.component }}-audit-results
        path: ${{ matrix.component }}/*audit-results.json

  # Code security scanning with CodeQL
  codeql-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        language: ['python', 'javascript']
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd backend
        pip install -e .
    
    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm ci
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Container image scanning
  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build images for scanning
      run: |
        docker build -t dto/api:scan backend/
        docker build -t dto/frontend:scan frontend/
    
    - name: Run Trivy vulnerability scanner (API)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dto/api:scan'
        format: 'sarif'
        output: 'api-trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dto/frontend:scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  # Infrastructure security scanning
  infrastructure-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov on Terraform
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infra/terraform
        framework: terraform
        output_format: sarif
        output_file_path: terraform-checkov-results.sarif
    
    - name: Run Checkov on Kubernetes manifests
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infra/helm
        framework: kubernetes
        output_format: sarif
        output_file_path: k8s-checkov-results.sarif
    
    - name: Run Checkov on Dockerfiles
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: docker-checkov-results.sarif
    
    - name: Upload Checkov scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  # License compliance check
  license-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install pip-licenses
      run: pip install pip-licenses
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -e .
    
    - name: Check Python licenses
      run: |
        cd backend
        pip-licenses --format=json --output-file=python-licenses.json
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check Node.js licenses
      run: |
        cd frontend
        npx license-checker --json --out nodejs-licenses.json
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          backend/python-licenses.json
          frontend/nodejs-licenses.json

  # Security report summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-scan, secret-scan, container-scan, infrastructure-scan, license-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scans Completed" >> security-summary.md
        echo "- ✅ Dependency vulnerability scan" >> security-summary.md
        echo "- ✅ Code security scan (CodeQL)" >> security-summary.md
        echo "- ✅ Secret detection scan" >> security-summary.md
        echo "- ✅ Container image scan" >> security-summary.md
        echo "- ✅ Infrastructure security scan" >> security-summary.md
        echo "- ✅ License compliance check" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Results" >> security-summary.md
        echo "Detailed results are available in the Security tab of this repository." >> security-summary.md
        echo "" >> security-summary.md
        echo "All artifacts from this scan are available for download." >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
