name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Python dependency audit
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'backend/pyproject.toml'
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,connectors]"
        pip install pip-audit
    
    - name: Python security audit
      working-directory: ./backend
      run: |
        pip-audit --format=json --output=python-audit.json --progress-spinner=off
        pip-audit --format=cyclonedx-json --output=python-sbom.json --progress-spinner=off
        # Fail on high severity vulnerabilities
        pip-audit --desc --format=cyclonedx-json --vulnerability --require-hashes --progress-spinner=off
    
    # Node.js dependency audit
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install Node dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Node.js security audit
      working-directory: ./frontend
      run: |
        # Generate audit report
        npm audit --audit-level=info --json > npm-audit.json || true
        # Fail on high severity vulnerabilities
        npm audit --audit-level=high
    
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-reports
        path: |
          backend/python-audit.json
          backend/python-sbom.json
          frontend/npm-audit.json
        retention-days: 90

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Generate SBOM for backend
      run: |
        syft backend/ -o spdx-json=backend-sbom.spdx.json
        syft backend/ -o cyclonedx-json=backend-sbom.cyclonedx.json
    
    - name: Generate SBOM for frontend
      run: |
        syft frontend/ -o spdx-json=frontend-sbom.spdx.json
        syft frontend/ -o cyclonedx-json=frontend-sbom.cyclonedx.json
    
    - name: Generate combined SBOM
      run: |
        syft . -o spdx-json=dataflow-guard-sbom.spdx.json
        syft . -o cyclonedx-json=dataflow-guard-sbom.cyclonedx.json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          *-sbom.*.json
        retention-days: 90

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build backend image
      run: |
        docker build -t dfg/backend:scan backend/
    
    - name: Build frontend image
      run: |
        docker build -t dfg/frontend:scan frontend/
    
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
    
    - name: Scan backend image
      run: |
        trivy image --format json --output backend-trivy.json dfg/backend:scan
        trivy image --severity HIGH,CRITICAL --exit-code 1 dfg/backend:scan
    
    - name: Scan frontend image
      run: |
        trivy image --format json --output frontend-trivy.json dfg/frontend:scan
        trivy image --severity HIGH,CRITICAL --exit-code 1 dfg/frontend:scan
    
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-scan-results
        path: |
          *-trivy.json
        retention-days: 90

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection
    
    - name: Install TruffleHog
      run: |
        curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.2/trufflehog_3.63.2_linux_amd64.tar.gz | tar -xz
        sudo mv trufflehog /usr/local/bin/
    
    - name: Scan for secrets
      run: |
        trufflehog git file://. --json --no-update > secrets-scan.json || true
        # Check if any secrets were found (fail if high confidence secrets detected)
        if grep -q '"verified":true' secrets-scan.json; then
          echo "High confidence secrets detected!"
          cat secrets-scan.json
          exit 1
        fi
    
    - name: Upload secrets scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secrets-scan-results
        path: secrets-scan.json
        retention-days: 90