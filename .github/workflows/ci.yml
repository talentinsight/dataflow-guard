name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Backend linting and testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dto_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        cd backend
        ruff check dto_api/ dto_cli/ tests/
    
    - name: Check formatting with black
      run: |
        cd backend
        black --check dto_api/ dto_cli/ tests/
    
    - name: Type check with mypy
      run: |
        cd backend
        mypy dto_api/ dto_cli/
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dto_test
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      run: |
        cd backend
        # Run unit tests (excluding integration tests)
        pytest tests/ -v --cov=dto_api --cov=dto_cli --cov-report=xml -m "not integration"
        
        # Run integration tests only if Snowflake credentials are available
        if [ -n "$SNOWFLAKE_ACCOUNT" ] && [ -n "$SNOWFLAKE_USER" ]; then
          echo "Running Snowflake integration tests..."
          pytest tests/ -v -m "integration" --tb=short
        else
          echo "Skipping Snowflake integration tests (credentials not available)"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend linting and testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Type check with TypeScript
      run: |
        cd frontend
        npm run type-check
    
    - name: Build application
      run: |
        cd frontend
        npm run build

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Audit Python dependencies
      run: |
        cd backend
        pip-audit --requirement pyproject.toml --format=json --output=audit-results.json
      continue-on-error: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Audit Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build images
      run: |
        docker build -t dto/api:test backend/
        docker build -t dto/frontend:test frontend/
    
    - name: Start services
      run: |
        cd infra
        docker-compose -f docker-compose.yml up -d postgres minio
        sleep 10
    
    - name: Run integration tests
      run: |
        # Start API with test image
        docker run -d --name dto-api-test \
          --network infra_dto-network \
          -e DATABASE_URL=postgresql://dto:dto@postgres:5432/dto \
          -e ARTIFACT_STORAGE_TYPE=local \
          -p 8000:8000 \
          dto/api:test
        
        # Wait for API to be ready
        sleep 15
        
        # Run basic health checks
        curl -f http://localhost:8000/api/v1/healthz
        curl -f http://localhost:8000/api/v1/readyz
    
    - name: Cleanup
      if: always()
      run: |
        cd infra
        docker-compose down -v
        docker rm -f dto-api-test || true

  # OpenAPI spec generation and validation
  openapi-validation:
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -e .
    
    - name: Generate OpenAPI spec
      run: |
        cd backend
        python -c "
        from dto_api.main import app
        import json
        with open('../docs/openapi.json', 'w') as f:
            json.dump(app.openapi(), f, indent=2)
        "
    
    - name: Validate OpenAPI spec
      uses: char0n/swagger-editor-validate@v1
      with:
        definition-file: docs/openapi.json
    
    - name: Upload OpenAPI spec
      uses: actions/upload-artifact@v3
      with:
        name: openapi-spec
        path: docs/openapi.json